package com.bvrith.ebook.ebookbe.controller;

import com.bvrith.ebook.ebookbe.model.Book;
import com.bvrith.ebook.ebookbe.dao.BookDAO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/books")
public class EbookController {

    @Autowired
    private BookDAO bookDAO;

    // Create or Update a book
    @PostMapping
    public ResponseEntity<Book> createOrUpdateBook(@RequestBody Book book) {
        // Save the book (will create a new record or update an existing one based on the ID)
        Book savedBook = bookDAO.save(book);
        return new ResponseEntity<>(savedBook, HttpStatus.CREATED);
    }

    // Get all books
    @GetMapping
    public List<Book> getAllBooks() {
        // Fetch all books
        return bookDAO.findAll();
    }

    // Get a book by ID
    @GetMapping("/{id}")
    public ResponseEntity<Book> getBookById(@PathVariable("id") int id) {
        // Fetch a book by its ID
        Optional<Book> book = bookDAO.findById(id);
        if (book.isPresent()) {
            return new ResponseEntity<>(book.get(), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Delete a book by ID
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteBook(@PathVariable("id") int id) {
        // Check if the book exists before deleting
        Optional<Book> book = bookDAO.findById(id);
        if (book.isPresent()) {
            bookDAO.deleteById(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}
