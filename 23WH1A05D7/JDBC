package practice;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class EmployeeDatabaseOperations {

    // Database connection details
    static final String DB_URL = "jdbc:mysql://localhost:3306/23wh1a05d7"; // Your database name
    static final String USER = "root"; // Your database username
    static final String PASS = "1234"; // Your database password

    // Method to establish database connection
    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL, USER, PASS);
    }

    // CREATE operation: Insert a new employee
    public static void insertEmployee(String name, float salary) {
        String insertQuery = "INSERT INTO Employee (name, salary) VALUES (?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(insertQuery)) {
            stmt.setString(1, name);
            stmt.setFloat(2, salary);
            int rowsAffected = stmt.executeUpdate();
            System.out.println(rowsAffected + " record(s) inserted.");
        } catch (SQLException e) {
            System.err.println("Error inserting employee: " + e.getMessage());
        }
    }

    // READ operation: Retrieve all employees
    public static void readEmployees() {
        String selectQuery = "SELECT * FROM Employee";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(selectQuery);
             ResultSet resultSet = stmt.executeQuery()) {
            while (resultSet.next()) {
                System.out.println("ID: " + resultSet.getInt("id")); // Assuming 'id' is a column in Employee table
                System.out.println("Name: " + resultSet.getString("name"));
                System.out.println("Salary: " + resultSet.getFloat("salary"));
                System.out.println("-------------------------");
            }
        } catch (SQLException e) {
            System.err.println("Error reading employees: " + e.getMessage());
        }
    }

    // UPDATE operation: Update an employee's details
    public static void updateEmployee(String oldName, String newName, float newSalary) {
        String updateQuery = "UPDATE Employee SET name = ?, salary = ? WHERE name = ?";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(updateQuery)) {
            stmt.setString(1, newName);
            stmt.setFloat(2, newSalary);
            stmt.setString(3, oldName);
            int rowsAffected = stmt.executeUpdate();
            System.out.println(rowsAffected + " record(s) updated.");
        } catch (SQLException e) {
            System.err.println("Error updating employee: " + e.getMessage());
        }
    }

    // DELETE operation: Remove an employee based on salary
    public static void deleteEmployee(float salary) {
        String deleteQuery = "DELETE FROM Employee WHERE salary = ?";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(deleteQuery)) {
            stmt.setFloat(1, salary);
            int rowsAffected = stmt.executeUpdate();
            System.out.println(rowsAffected + " record(s) deleted.");
        } catch (SQLException e) {
            System.err.println("Error deleting employee: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        // Demonstrating CRUD operations
        insertEmployee("Ananya", 60000);
        insertEmployee("Ariel", 50000);
        readEmployees();
        updateEmployee("Harsha", "Arjun", 65000);
        readEmployees();
        deleteEmployee(50000);
        readEmployees();
    }
}
